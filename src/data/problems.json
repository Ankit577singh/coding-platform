{
  "problems": [
    {
      "id": 1,
      "title": "Two Sum",
      "difficulty": "Easy",
      "acceptance": "45.6%",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
      "examples": [
        {
          "input": "nums = [2,7,11,15], target = 9",
          "output": "[0,1]",
          "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
        }
      ],
      "constraints": [
        "2 <= nums.length <= 10^4",
        "-10^9 <= nums[i] <= 10^9"
      ],
      "testCases": [
        {
          "input": [[2,7,11,15], 9],
          "output": [0,1]
        }
      ],
      "defaultCode": {
        "javascript": "function twoSum(nums, target) {\n  // Your code here\n};",
        "python": "def twoSum(nums, target):\n    # Your code here",
        "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 2,
      "title": "Add Two Numbers",
      "difficulty": "Medium",
      "acceptance": "34.2%",
      "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
      "examples": [
        {
          "input": "l1 = [2,4,3], l2 = [5,6,4]",
          "output": "[7,0,8]",
          "explanation": "342 + 465 = 807."
        }
      ],
      "constraints": [
        "The number of nodes in each linked list is in the range [1, 100].",
        "0 <= Node.val <= 9"
      ],
      "testCases": [
        {
          "input": [[2,4,3], [5,6,4]],
          "output": [7,0,8]
        }
      ],
      "defaultCode": {
        "javascript": "function addTwoNumbers(l1, l2) {\n  // Your code here\n};",
        "python": "def addTwoNumbers(l1, l2):\n    # Your code here",
        "java": "class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 3,
      "title": "Longest Substring Without Repeating Characters",
      "difficulty": "Medium",
      "acceptance": "31.8%",
      "description": "Given a string s, find the length of the longest substring without repeating characters.",
      "examples": [
        {
          "input": "s = \"abcabcbb\"",
          "output": "3",
          "explanation": "The answer is \"abc\", with the length of 3."
        }
      ],
      "constraints": [
        "0 <= s.length <= 5 * 10^4",
        "s consists of English letters, digits, symbols and spaces."
      ],
      "testCases": [
        {
          "input": ["abcabcbb"],
          "output": 3
        }
      ],
      "defaultCode": {
        "javascript": "function lengthOfLongestSubstring(s) {\n  // Your code here\n};",
        "python": "def lengthOfLongestSubstring(s):\n    # Your code here",
        "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 4,
      "title": "Median of Two Sorted Arrays",
      "difficulty": "Hard",
      "acceptance": "28.5%",
      "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.",
      "examples": [
        {
          "input": "nums1 = [1,3], nums2 = [2]",
          "output": "2.00000",
          "explanation": "merged array = [1,2,3] and median is 2."
        }
      ],
      "constraints": [
        "nums1.length == m",
        "nums2.length == n",
        "0 <= m <= 1000",
        "0 <= n <= 1000"
      ],
      "testCases": [
        {
          "input": [[1,3], [2]],
          "output": 2.0
        }
      ],
      "defaultCode": {
        "javascript": "function findMedianSortedArrays(nums1, nums2) {\n  // Your code here\n};",
        "python": "def findMedianSortedArrays(nums1, nums2):\n    # Your code here",
        "java": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 5,
      "title": "Longest Palindromic Substring",
      "difficulty": "Medium",
      "acceptance": "30.7%",
      "description": "Given a string s, return the longest palindromic substring in s.",
      "examples": [
        {
          "input": "s = \"babad\"",
          "output": "\"bab\"",
          "explanation": "\"aba\" is also a valid answer."
        }
      ],
      "constraints": [
        "1 <= s.length <= 1000",
        "s consist of only digits and English letters."
      ],
      "testCases": [
        {
          "input": ["babad"],
          "output": "bab"
        }
      ],
      "defaultCode": {
        "javascript": "function longestPalindrome(s) {\n  // Your code here\n};",
        "python": "def longestPalindrome(s):\n    # Your code here",
        "java": "class Solution {\n    public String longestPalindrome(String s) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 6,
      "title": "Zigzag Conversion",
      "difficulty": "Medium",
      "acceptance": "38.9%",
      "description": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)",
      "examples": [
        {
          "input": "s = \"PAYPALISHIRING\", numRows = 3",
          "output": "\"PAHNAPLSIIGYIR\""
        }
      ],
      "constraints": [
        "1 <= s.length <= 1000",
        "s consists of English letters (lower-case and upper-case), ',' and '.'.",
        "1 <= numRows <= 1000"
      ],
      "testCases": [
        {
          "input": ["PAYPALISHIRING", 3],
          "output": "PAHNAPLSIIGYIR"
        }
      ],
      "defaultCode": {
        "javascript": "function convert(s, numRows) {\n  // Your code here\n};",
        "python": "def convert(s, numRows):\n    # Your code here",
        "java": "class Solution {\n    public String convert(String s, int numRows) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 7,
      "title": "Reverse Integer",
      "difficulty": "Medium",
      "acceptance": "27.5%",
      "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.",
      "examples": [
        {
          "input": "x = 123",
          "output": "321"
        }
      ],
      "constraints": [
        "-2^31 <= x <= 2^31 - 1"
      ],
      "testCases": [
        {
          "input": [123],
          "output": 321
        }
      ],
      "defaultCode": {
        "javascript": "function reverse(x) {\n  // Your code here\n};",
        "python": "def reverse(x):\n    # Your code here",
        "java": "class Solution {\n    public int reverse(int x) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 8,
      "title": "String to Integer (atoi)",
      "difficulty": "Medium",
      "acceptance": "16.6%",
      "description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).",
      "examples": [
        {
          "input": "s = \"42\"",
          "output": "42"
        }
      ],
      "constraints": [
        "0 <= s.length <= 200",
        "s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'."
      ],
      "testCases": [
        {
          "input": ["42"],
          "output": 42
        }
      ],
      "defaultCode": {
        "javascript": "function myAtoi(s) {\n  // Your code here\n};",
        "python": "def myAtoi(s):\n    # Your code here",
        "java": "class Solution {\n    public int myAtoi(String s) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 9,
      "title": "Palindrome Number",
      "difficulty": "Easy",
      "acceptance": "52.3%",
      "description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
      "examples": [
        {
          "input": "x = 121",
          "output": "true"
        }
      ],
      "constraints": [
        "-2^31 <= x <= 2^31 - 1"
      ],
      "testCases": [
        {
          "input": [121],
          "output": true
        }
      ],
      "defaultCode": {
        "javascript": "function isPalindrome(x) {\n  // Your code here\n};",
        "python": "def isPalindrome(x):\n    # Your code here",
        "java": "class Solution {\n    public boolean isPalindrome(int x) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 10,
      "title": "Regular Expression Matching",
      "difficulty": "Hard",
      "acceptance": "27.9%",
      "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where: '.' Matches any single character. '*' Matches zero or more of the preceding element.",
      "examples": [
        {
          "input": "s = \"aa\", p = \"a\"",
          "output": "false",
          "explanation": "\"a\" does not match the entire string \"aa\"."
        }
      ],
      "constraints": [
        "1 <= s.length <= 20",
        "1 <= p.length <= 30",
        "s contains only lowercase English letters.",
        "p contains only lowercase English letters, '.', and '*'."
      ],
      "testCases": [
        {
          "input": ["aa", "a"],
          "output": false
        }
      ],
      "defaultCode": {
        "javascript": "function isMatch(s, p) {\n  // Your code here\n};",
        "python": "def isMatch(s, p):\n    # Your code here",
        "java": "class Solution {\n    public boolean isMatch(String s, String p) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 11,
      "title": "Container With Most Water",
      "difficulty": "Medium",
      "acceptance": "53.1%",
      "description": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.",
      "examples": [
        {
          "input": "height = [1,8,6,2,5,4,8,3,7]",
          "output": "49"
        }
      ],
      "constraints": [
        "n == height.length",
        "2 <= n <= 10^5",
        "0 <= height[i] <= 10^4"
      ],
      "testCases": [
        {
          "input": [[1,8,6,2,5,4,8,3,7]],
          "output": 49
        }
      ],
      "defaultCode": {
        "javascript": "function maxArea(height) {\n  // Your code here\n};",
        "python": "def maxArea(height):\n    # Your code here",
        "java": "class Solution {\n    public int maxArea(int[] height) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 12,
      "title": "Integer to Roman",
      "difficulty": "Medium",
      "acceptance": "58.3%",
      "description": "Given an integer, convert it to a roman numeral.",
      "examples": [
        {
          "input": "num = 3",
          "output": "\"III\""
        }
      ],
      "constraints": [
        "1 <= num <= 3999"
      ],
      "testCases": [
        {
          "input": [3],
          "output": "III"
        }
      ],
      "defaultCode": {
        "javascript": "function intToRoman(num) {\n  // Your code here\n};",
        "python": "def intToRoman(num):\n    # Your code here",
        "java": "class Solution {\n    public String intToRoman(int num) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 13,
      "title": "Roman to Integer",
      "difficulty": "Easy",
      "acceptance": "57.5%",
      "description": "Given a roman numeral, convert it to an integer.",
      "examples": [
        {
          "input": "s = \"III\"",
          "output": "3"
        }
      ],
      "constraints": [
        "1 <= s.length <= 15",
        "s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').",
        "It is guaranteed that s is a valid roman numeral in the range [1, 3999]."
      ],
      "testCases": [
        {
          "input": ["III"],
          "output": 3
        }
      ],
      "defaultCode": {
        "javascript": "function romanToInt(s) {\n  // Your code here\n};",
        "python": "def romanToInt(s):\n    # Your code here",
        "java": "class Solution {\n    public int romanToInt(String s) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 14,
      "title": "Longest Common Prefix",
      "difficulty": "Easy",
      "acceptance": "38.8%",
      "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".",
      "examples": [
        {
          "input": "strs = [\"flower\",\"flow\",\"flight\"]",
          "output": "\"fl\""
        }
      ],
      "constraints": [
        "1 <= strs.length <= 200",
        "0 <= strs[i].length <= 200",
        "strs[i] consists of only lowercase English letters."
      ],
      "testCases": [
        {
          "input": [["flower","flow","flight"]],
          "output": "fl"
        }
      ],
      "defaultCode": {
        "javascript": "function longestCommonPrefix(strs) {\n  // Your code here\n};",
        "python": "def longestCommonPrefix(strs):\n    # Your code here",
        "java": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 15,
      "title": "3Sum",
      "difficulty": "Medium",
      "acceptance": "30.8%",
      "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.",
      "examples": [
        {
          "input": "nums = [-1,0,1,2,-1,-4]",
          "output": "[[-1,-1,2],[-1,0,1]]"
        }
      ],
      "constraints": [
        "0 <= nums.length <= 3000",
        "-10^5 <= nums[i] <= 10^5"
      ],
      "testCases": [
        {
          "input": [[-1,0,1,2,-1,-4]],
          "output": [[-1,-1,2],[-1,0,1]]
        }
      ],
      "defaultCode": {
        "javascript": "function threeSum(nums) {\n  // Your code here\n};",
        "python": "def threeSum(nums):\n    # Your code here",
        "java": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        // Your code here\n    }\n}"
      }
    },
    {
      "id": 16,
      "title": "Letter Combinations of a Phone Number",
      "difficulty": "Medium",
      "acceptance": "52.9%",
      "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.",
      "examples": [
        {
          "input": "digits = \"23\"",
          "output": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]"
        }
      ],
      "constraints": [
        "0 <= digits.length <= 4",
        "digits[i] is a digit in the range ['2', '9']."
      ],
      "testCases": [
        {
          "input": ["23"],
          "output": ["ad","ae","af","bd","be","bf","cd","ce","cf"]
        }
      ],
      "defaultCode": {
        "javascript": "function letterCombinations(digits) {\n  // Your code here\n};",
        "python": "def letterCombinations(digits):\n    # Your code here",
        "java": "class Solution {\n    public List<String> letterCombinations(String digits) {\n        // Your code here\n    }\n}"
      }
    }
  ]
}